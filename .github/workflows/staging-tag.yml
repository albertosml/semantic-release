name: Create staging tag

on:
  workflow_dispatch:
    inputs:
      type:
        type: choice
        required: true
        description: Tag type (release candidate or beta)
        options: 
        - rc
        - beta
      deploy:
        type: choice
        required: true
        description: What to deploy (frontend, backend or all)
        options: 
        - frontend
        - backend
        - all

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Semantic Release
        id: release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          dry_run: true
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            conventional-changelog-conventionalcommits
      - name: Calculate tag version
        id: version
        run: |
            major=${{ steps.release.outputs.new_release_major_version }}
            minor=${{ steps.release.outputs.new_release_minor_version }}
            patch=${{ steps.release.outputs.new_release_patch_version }}

            tag_type=${{ github.event.inputs.type }}

            current_version_number=$(git tag --list $major.$minor.$patch-$tag_type.* | wc -l)
            next_version_number=$(($current_version_number + 1))

            echo "new_tag_version=$major.$minor.$patch-$tag_type.$next_version_number" >> "$GITHUB_OUTPUT"
      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.version.outputs.new_tag_version }}',
              sha: context.sha
            })
    outputs:
      tagVersion: ${{ steps.version.outputs.new_tag_version }}
  upload-image:
    name: Upload Docker image
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/book-recommender:${{ needs.create-release.outputs.tagVersion }}
  deploy:
    name: Deploy
    needs: [create-release, upload-image]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./deploy
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_image_tag: ${{ needs.create-release.outputs.tagVersion }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    - name: Terraform Init
      run: terraform init -backend-config="./${{ github.event.inputs.type }}.config"
    - name: Terraform fmt
      run: terraform fmt -check
    - name: Terraform Validate
      run: terraform validate -no-color
    - name: Terraform Plan
      run: terraform plan -no-color
    - name: Terraform Apply
      run: terraform apply -auto-approve